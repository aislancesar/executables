#!/bin/bash

erase_auxiliar()
{
    rm -f *.aux ;
    rm -f *.bbl ;
    rm -f *.blg ;
    rm -f *.brf ;
    rm -f *.idx ;
    rm -f *.lof ;
    rm -f *.log ;
    rm -f *.lot ;
    rm -f *.toc ;
    rm -f *.fdb_latexmk ;
    rm -f *.fls ;
    echo "Auxiliar files were erased!"
}

control_c()
{
    kill $OKULAR 2> /dev/null ;
    rm -f aux.* ;
    rm -f show.pdf ;
    echo -e "\e[G\e[1;31mFinalizing the looping compilation.\e[0m"
    exit
}

if [[ -n ${5} ]]; then
    echo "Too much arguments!" ;
    exit
fi

if [[ ${1} = "-h" ]]; then
    echo "Available commands:" ;
    echo "    -f = FullCompile, erases all auxiliar files and compiles everything." ;
    echo "    -l = Looping Compilation, keeps compiling the archive every time it is saved." ;
    echo "    -e = Erase Only, just erases auxiliar files, without compilation." ;
    echo "    -h = Help." ;
    exit
fi

FILE="*.tex"
TYPE=""
LOOP=false
LAST=""
BLAST=""
AUX=""
OKULAR=""
CLEAR=false

for i in ${1} ${2} ${3} ${4}
do
    if [[ -e $i ]]; then
        if [[ "$FILE" = "*.tex" ]]; then
            FILE=$i
        else
            echo "Too much file options, use just one!" ;
            exit
        fi
    elif [[ $i = '-f' ]]; then
        TYPE="f"
        CLEAR=true
    elif [[ $i = '-e' ]]; then
        erase_auxiliar ;
        exit
    elif [[ $i = '-l' ]]; then
        LOOP=true
    fi
done

if $LOOP && [[ $TYPE != "" ]]; then
    echo "The looping option conflicts with the compiling option."
fi

AUX=( $FILE )

if [[ "$FILE" = "*.tex" && ${#AUX[@]} -ne 1 ]]; then
    echo "Too much file options, use just one!" ;
    exit
fi

if $LOOP; then
    echo -e "\e[0mCompiling!"
    if latexmk -pdf -halt-on-error -jobname=aux $FILE &> /dev/null ; then
        if mv aux.pdf show.pdf ; then
            echo -e "\e[F\e[2K\e[1;36mCompiled!" ;
            okular show.pdf > /dev/null & 
            OKULAR=$!
        else
            echo -e "\e[F\e[2K\e[1;31mCompilation Error, try again." ;
            control_c
            exit
        fi
    else
        echo -e "\e[F\e[2K\e[1;31mCompilation Error, try again." ;
        control_c
        exit
    fi
    
    if [ -e $FILE ] && ls txt/* &> /dev/null && ls *.bib &> /dev/null; then
        LAST=$(stat -c%Y $FILE txt/* *.bib)
    elif [ -e $FILE ] && ls txt/* &> /dev/null; then
        LAST=$(stat -c%Y $FILE txt/*)
    elif [ -e $FILE ] && ls *.bib &> /dev/null; then
        LAST=$(stat -c%Y $FILE *.bib)
    elif [ -e $FILE ]; then
        LAST=$(stat -c%Y $FILE)
    fi

    trap control_c SIGINT

    echo -e "\e[1;36mRunning looping compilation.\e[0m"
    while :
    do
        sleep 1
        
        if [ -e $FILE ] && ls txt/* &> /dev/null && ls *.bib &> /dev/null; then
            ACT=$(stat -c%Y $FILE txt/* *.bib)
        elif [ -e $FILE ] && ls txt/* &> /dev/null; then
            ACT=$(stat -c%Y $FILE txt/*)
        elif [ -e $FILE ] && ls *.bib &> /dev/null; then
            ACT=$(stat -c%Y $FILE *.bib)
        elif [ -e $FILE ]; then
            ACT=$(stat -c%Y $FILE)
        fi

        if ! ps $OKULAR > /dev/null ; then
            control_c
        fi

        if [[ $LAST != $ACT ]]; then
            echo -e "\e[0mCompiling!"
            LAST=$ACT ;
            if latexmk -pdf -halt-on-error -jobname=aux $FILE &> /dev/null ; then
                if mv aux.pdf show.pdf ; then
                    echo -e "\e[F\e[2K\e[1;36mCompiled!" ;
                else
                    echo -e "\e[F\e[2K\e[1;31mCompilation Error, try again." ;
                fi
            else
                echo -e "\e[F\e[2K\e[1;31mCompilation Error, try again." ;
            fi
        fi
    done
fi

if [[ $TYPE = "f" ]]; then
    erase_auxiliar ;
    rm -f *.pdf
fi

if ! latexmk -pdf -halt-on-error $FILE ; then
    echo "Latex Compilation Error: Something went wrong in the compilation process."
else
    echo "Latex Compilation Success: Tex file was succesfully compiled."
fi

if $CLEAR; then
    erase_auxiliar
fi
